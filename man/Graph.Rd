% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/igraph_object.R
\name{Graph}
\alias{Graph}
\title{Graph visualisation}
\usage{
Graph(
  adjacency,
  node_label = NULL,
  node_colour = NULL,
  node_shape = NULL,
  weighted = FALSE,
  satellites = FALSE
)
}
\arguments{
\item{adjacency}{adjacency matrix or output from
\code{\link{GraphicalModel}}.}

\item{node_label}{optional vector of node labels. This vector must contain as
many entries as there are rows/columns in the adjacency matrix and must be
in the same order (the order is used to assign labels to nodes).}

\item{node_colour}{optional vector of node colours. This vector must contain
as many entries as there are rows/columns in the adjacency matrix and must
be in the same order (the order is used to assign colours to nodes).
Integers, named colours or RGB values can be used.}

\item{node_shape}{optional vector of node shapes. This vector must contain as
many entries as there are rows/columns in the adjacency matrix and must be
in the same order (the order is used to assign shapes to nodes). Possible
values are "circle", "square", "triangle" or "star".}

\item{weighted}{indicating if entries of the adjacency matrix should define
edge width. If weighted=FALSE, an unweigthed igraph object is created and
all edges have the same width. If weighted=TRUE, edge width is defined by
the corresponding value in the adjacency matrix. If weighted=NULL, nodes
are linked by as many edges as indicated in the adjacency matrix (integer
values are needed).}

\item{satellites}{logical indicating if unconnected nodes (satellites) should
be included in the igraph object.}
}
\value{
an igraph object.
}
\description{
Produces an igraph object from a adjacency matrix.
}
\examples{
## From adjacency matrix
# Un-weighted
adjacency <- SimulateAdjacency(pk = 20, topology = "scale-free")
plot(Graph(adjacency))

# Weighted
adjacency <- adjacency * runif(prod(dim(adjacency)))
adjacency <- adjacency + t(adjacency)
plot(Graph(adjacency, weighted = TRUE))

# Node colours and shapes
plot(Graph(adjacency, weighted = TRUE, node_shape = "star", node_colour = "red"))

## From stability selection output
set.seed(1)
simul <- SimulateGraphical(pk = 20)
stab <- GraphicalModel(data = simul$data)
plot(Graph(stab))
}
