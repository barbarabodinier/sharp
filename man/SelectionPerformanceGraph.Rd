% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/selection_performance.R
\name{SelectionPerformanceGraph}
\alias{SelectionPerformanceGraph}
\title{Graph representation of selection performance}
\usage{
SelectionPerformanceGraph(
  theta,
  theta_star,
  colours = c("tomato", "forestgreen", "navy"),
  lty = c(2, 3, 1),
  node_colour = NULL,
  plot = FALSE,
  show_labels = TRUE,
  filename = NULL,
  fileformat = "pdf",
  res = 500,
  width = 7,
  height = 7,
  units = "in",
  ...
)
}
\arguments{
\item{theta}{binary adjacency matrix or output from \code{GraphicalModel}.}

\item{theta_star}{true binary adjacency matrix or output from
\code{SimulateGraphical}.}

\item{colours}{vector of edge colours. The first entry of the vector defines
the colour of False Positive edges, second entry is for True Negatives and
third entry is for True Positives.}

\item{lty}{vector of line types for edges. The first entry of the vector
defines the colour of False Positive edges, second entry is for True
Negatives and third entry is for True Positives.}

\item{node_colour}{optional vector of node colours. This vector must contain
as many entries as there are rows/columns in the adjacency matrix and must
be in the same order (the order is used to assign colours to nodes).
Integers, named colours or RGB values can be used.}

\item{plot}{logical indicating if the generated graph should be plotted.}

\item{show_labels}{logical indicating if the node labels should be displayed.}

\item{filename}{file path to saved figure. If \code{filename=NULL}, the plot
is not saved.}

\item{fileformat}{format of the saved figure. Possible values are
\code{"pdf"} or \code{"png"}. Only used if argument \code{filename} is
provided.}

\item{res}{resolution of the png figure (see \code{\link[grDevices]{png}}).
Only used if argument \code{filename} is provided and
\code{fileformat="png"}.}

\item{width}{width of the saved figure. Only used if argument \code{filename}
is provided.}

\item{height}{height of the saved figure. Only used if argument
\code{filename} is provided.}

\item{units}{units of width and height. Possible values are \code{"px"},
\code{"in"}, \code{"cm"} and \code{"mm"} (see
\code{\link[grDevices]{png}}). Only used if argument \code{filename} is
provided and \code{fileformat="png"}.}

\item{...}{additional arguments to be passed to \code{\link{Graph}}.}
}
\description{
Generates an igraph object representing the True Positive, False Positive and
False Negative edges by comparing the set of selected edges to the set of
true edges. This function only applies to graphical models and can only be
used in simulation studies (i.e. when the true model is known).
}
\examples{
\dontrun{

# Data simulation
set.seed(1)
simul <- SimulateGraphical(pk = 30)

# Stability selection
stab <- GraphicalModel(xdata = simul$data, K = 10)

# Performance graph
perfgraph <- SelectionPerformanceGraph(
  theta = stab,
  theta_star = simul, plot = TRUE
)

# Alternative formulation
perfgraph <- SelectionPerformanceGraph(
  theta = Adjacency(stab),
  theta_star = simul$theta, plot = TRUE
)

# User-defined colours/shapes
perfgraph <- SelectionPerformanceGraph(
  theta = stab, theta_star = simul, plot = TRUE,
  colours = c("forestgreen", "orange", "black"),
  node_colour = "red", node_shape = "star"
)
perfgraph <- SelectionPerformanceGraph(
  theta = stab, theta_star = simul, plot = TRUE,
  colours = c("forestgreen", "orange", "black"), lty = c(4, 2, 3)
)

# Using and re-formatting igraph object
require(igraph)
igraph::V(perfgraph)$size <- 10
plot(perfgraph, layout = igraph::layout_with_kk(perfgraph))

# Regression model
set.seed(1)
simul <- SimulateRegression(pk = 30)
stab <- VariableSelection(xdata = simul$xdata, ydata = simul$ydata)
perf <- SelectionPerformance(theta = stab, theta_star = simul)
perf_graph <- SelectionPerformanceGraph(theta = stab, theta_star = simul, plot = TRUE)

# Sparse PLS model
set.seed(1)
simul <- SimulateRegression(n = 50, pk = c(5, 5, 5), family = "gaussian")
stab <- BiSelection(
  xdata = simul$xdata, ydata = simul$ydata,
  family = "gaussian", ncomp = 3,
  LambdaX = 1:(ncol(x) - 1),
  LambdaY = 1:(ncol(y) - 1),
  implementation = SparsePLS,
  n_cat = 2
)
perf <- SelectionPerformance(theta = stab, theta_star = simul)
perf_graph <- SelectionPerformanceGraph(theta = stab, theta_star = simul, plot = TRUE)
}

}
\seealso{
\code{\link{GraphicalModel}}, \code{\link{Graph}}

Other functions for evaluation of model performance: 
\code{\link{ClusteringPerformance}()},
\code{\link{SelectionPerformance}()}
}
\concept{functions for evaluation of model performance}
