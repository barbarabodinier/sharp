% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/roc.R
\name{Recalibrate}
\alias{Recalibrate}
\title{Regression model recalibration}
\usage{
Recalibrate(xdata, ydata, stability = NULL, family = NULL)
}
\arguments{
\item{xdata}{matrix of predictors with observations as rows and variables as
columns.}

\item{ydata}{optional vector or matrix of outcome(s). If \code{family} is set
to \code{"binomial"} or \code{"multinomial"}, \code{ydata} can be a vector
with character/numeric values, or a factor.}

\item{stability}{output of \code{\link{VariableSelection}}. With
\code{stability=NULL} (the default), a model including all variables in
\code{xdata} as predictors is fitted. Argument \code{family} must be
provided in this case.}

\item{family}{type of regression model. Possible values include
\code{"gaussian"} (linear regression), \code{"binomial"} (logistic
regression), \code{"multinomial"} (multinomial regression), and
\code{"cox"} (survival analysis). This argument must be consistent with
input \code{stability}, if provided.}
}
\value{
The output as obtained from: \item{\code{\link[stats]{lm}}}{for
  linear regression (\code{"gaussian"} family).}
  \item{\code{\link[stats]{glm}}}{for logistic regression (\code{"binomial"}
  family).} \item{\code{\link[nnet]{multinom}}}{for multinomial regression
  (\code{"multinomial"} family).}
}
\description{
Recalibrates the regression using an un-penalised model with stably selected
variables as predictors. Variables in \code{xdata} not evaluated in the
stability selection model will automatically be included as predictors.
}
\examples{
\dontrun{

## Linear regression

# Data simulation
set.seed(1)
simul <- SimulateRegression(n = 100, pk = 50, family = "gaussian")

# Stability selection
stab <- VariableSelection(xdata = simul$xdata, ydata = simul$ydata, family = "gaussian")
print(SelectedVariables(stab))

# Recalibrating the model
recalibrated <- Recalibrate(
  xdata = simul$xdata, ydata = simul$ydata,
  stability = stab
)
recalibrated$coefficients # recalibrated coefficients
head(recalibrated$fitted.values) # recalibrated predicted probabilities

# Fitting the full model (including all possible predictors)
recalibrated <- Recalibrate(
  xdata = simul$xdata, ydata = simul$ydata,
  family = "gaussian"
)
recalibrated$coefficients # recalibrated coefficients


## Cox regression

# Data simulation
set.seed(1)
simul <- SimulateRegression(n = 100, pk = 50, family = "binomial")

# Stability selection
ydata <- cbind(
  time = runif(nrow(simul$ydata), min = 100, max = 2000),
  case = simul$ydata[, 1]
) # including dummy time to event
stab <- VariableSelection(xdata = simul$xdata, ydata = ydata, family = "cox")
print(SelectedVariables(stab))

# Recalibrating the model
recalibrated <- Recalibrate(
  xdata = simul$xdata, ydata = ydata,
  stability = stab
)
recalibrated$coefficients # recalibrated coefficients
head(recalibrated$linear.predictors) # recalibrated scores


## Logistic regression

# Data simulation
set.seed(1)
simul <- SimulateRegression(n = 200, pk = 20, family = "binomial")

# Stability selection
stab <- VariableSelection(xdata = simul$xdata, ydata = simul$ydata, family = "binomial")

# Recalibrating the model
recalibrated <- Recalibrate(
  xdata = simul$xdata, ydata = simul$ydata,
  stability = stab
)
recalibrated$coefficients # recalibrated coefficients
head(recalibrated$fitted.values) # recalibrated predicted probabilities


## Multinomial regression

# Stability selection
set.seed(1)
simul <- SimulateRegression(n = 200, pk = 15, family = "multinomial")
stab <- VariableSelection(
  xdata = simul$xdata, ydata = simul$ydata,
  family = "multinomial"
)

# Recalibrating the model
recalibrated <- Recalibrate(
  xdata = simul$xdata, ydata = simul$ydata,
  stability = stab
)
summary(recalibrated) # recalibrated coefficients
head(recalibrated$fitted.values) # recalibrated predicted probabilities
}

}
\seealso{
\code{\link{VariableSelection}}
}
