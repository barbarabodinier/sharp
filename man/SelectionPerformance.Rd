% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/selection_performance.R
\name{SelectionPerformance}
\alias{SelectionPerformance}
\title{Selection performance}
\usage{
SelectionPerformance(theta, theta_star, pk = NULL, cor = NULL, thr = 0.5)
}
\arguments{
\item{theta}{output from \code{\link{VariableSelection}},
\code{\link{BiSelection}}, or \code{\link{GraphicalModel}}. Alternatively,
it can be a binary matrix of selected variables (in variable selection) or
a binary adjacency matrix (in graphical modelling)}

\item{theta_star}{output from \code{\link{SimulateRegression}},
\code{\link{SimulateComponents}}, or \code{\link{SimulateGraphical}}.
Alternatively, it can be a binary matrix of true predictors (in variable
selection) or the true binary adjacency matrix (in graphical modelling).}

\item{pk}{optional vector encoding the grouping structure. Only used for
multi-block stability selection where \code{pk} indicates the number of
variables in each group. If \code{pk=NULL}, single-block stability
selection is performed.}

\item{cor}{optional correlation matrix. Only used in graphical modelling.}

\item{thr}{optional threshold in correlation. Only used in graphical
modelling and when argument "cor" is not NULL.}
}
\value{
A matrix of selection metrics including:

  \item{TP}{number of True Positives (TP)} \item{FN}{number of False
  Negatives (TN)} \item{FP}{number of False Positives (FP)} \item{TN}{number
  of True Negatives (TN)} \item{sensitivity}{sensitivity, i.e. TP/(TP+FN)}
  \item{specificity}{specificity, i.e. TN/(TN+FP)} \item{accuracy}{accuracy,
  i.e. (TP+TN)/(TP+TN+FP+FN)} \item{precision}{precision (p), i.e.
  TP/(TP+FP)} \item{recall}{recall (r), i.e. TP/(TP+FN)}
  \item{F1_score}{F1-score, i.e. 2*p*r/(p+r)}

  If argument "cor" is provided, the number of False Positives among
  correlated (FP_c) and uncorrelated (FP_i) pairs, defined as having
  correlations (provided in "cor") above or below the threshold "thr", are
  also reported.

  Block-specific performances are reported if "pk" is not NULL. In this case,
  the first row of the matrix corresponds to the overall performances, and
  subsequent rows correspond to each of the blocks. The order of the blocks
  is defined as in \code{\link{BlockStructure}}.
}
\description{
Computes different metrics of selection performance by comparing the set of
selected features to the set of true predictors/edges. This function can only
be used in simulation studies (i.e. when the true model is known).
}
\examples{
\donttest{
# Variable selection model
set.seed(1)
simul <- SimulateRegression(pk = 30)
stab <- VariableSelection(xdata = simul$xdata, ydata = simul$ydata)
perf <- SelectionPerformance(theta = stab, theta_star = simul)
perf <- SelectionPerformance(
  theta = SelectedVariables(stab),
  theta_star = simul$theta
) # alternative formulation

# Single-block graphical model
set.seed(1)
simul <- SimulateGraphical(pk = 30)
stab <- GraphicalModel(xdata = simul$data)
perf <- SelectionPerformance(theta = stab, theta_star = simul)
perf <- SelectionPerformance(
  theta = stab, theta_star = simul,
  cor = cor(simul$data), thr = 0.5
)
perf <- SelectionPerformance(
  theta = Adjacency(stab),
  theta_star = simul$theta
) # alternative formulation

# Multi-block graphical model
set.seed(1)
simul <- SimulateGraphical(pk = c(10, 10))
stab <- GraphicalModel(xdata = simul$data, pk = c(10, 10), lambda_other_blocks = rep(0, 3))
perf <- SelectionPerformance(theta = stab, theta_star = simul, pk = c(10, 10))
perf <- SelectionPerformance(
  theta = stab, theta_star = simul, pk = c(10, 10),
  cor = cor(simul$data), thr = 0.5
)
perf <- SelectionPerformance(
  theta = Adjacency(stab),
  theta_star = simul$theta,
  pk = c(10, 10)
) # alternative formulation

# Sparse PLS model
set.seed(1)
simul <- SimulateRegression(n = 50, pk = c(5, 5, 5), family = "gaussian")
x <- simul$xdata
y <- simul$ydata
stab <- BiSelection(
  xdata = simul$xdata, ydata = simul$ydata,
  family = "gaussian", ncomp = 3,
  LambdaX = 1:(ncol(x) - 1),
  LambdaY = 1:(ncol(y) - 1),
  implementation = SparsePLS,
  n_cat = 2
)
perf <- SelectionPerformance(theta = stab, theta_star = simul)
perf <- SelectionPerformance(
  theta = stab$selected,
  theta_star = simul$theta
) # alternative formulation
}

}
\seealso{
Other functions for model performance: 
\code{\link{SelectionPerformanceGraph}()}
}
\concept{functions for model performance}
