% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lambda_grid.R
\name{LambdaGridRegression}
\alias{LambdaGridRegression}
\title{Grid of penalty parameters (regression model)}
\usage{
LambdaGridRegression(
  xdata,
  ydata,
  tau = 0.5,
  seed = 1,
  family = "gaussian",
  implementation = "glmnet",
  resampling = "subsampling",
  Lambda_cardinal = 100,
  check_input = TRUE,
  ...
)
}
\arguments{
\item{xdata}{matrix of predictors with observations as rows and variables as
columns.}

\item{ydata}{vector or matrix of outcome(s).}

\item{tau}{subsample size. Only used with \code{resampling="subsampling"}.}

\item{seed}{value of the seed.}

\item{family}{type of regression model. If \code{implementation="glmnet"},
this argument is defined as in \code{\link[glmnet]{glmnet}}. Possible
values include \code{"gaussian"} (linear regression), \code{"binomial"}
(logistic regression), \code{"multinomial"} (multinomial regression), and
\code{"cox"} (survival analysis).}

\item{implementation}{character string indicating the name of the function to
use for variable selection. If \code{implementation="glmnet"},
\code{\link[glmnet]{glmnet}} is used for regularised regression.
Alternatively, a function with arguments \code{x}, \code{y}, \code{lambda},
\code{family} and \code{...}, and returning a list of two matrices named
\code{selected} and \code{beta_full} of the correct dimensions can be used
(more details in \code{\link{SelectionAlgo}}).}

\item{resampling}{resampling approach. Possible values are:
\code{"subsampling"} for sampling without replacement of a proportion
\code{tau} of the observations, or \code{"bootstrap"} for sampling with
replacement generating a resampled dataset with as many observations as in
the full sample. Alternatively, this argument can be a character string
indicating the name of a function to use for resampling. This function must
use arguments named \code{"data"} and \code{"tau"} and return IDs of
observations to be included in the resampled dataset (see example in
\code{\link{Resample}}).}

\item{Lambda_cardinal}{number of values in the grid of parameters controlling
the level of sparsity in the underlying algorithm.}

\item{check_input}{logical indicating if input values should be checked
(recommended).}

\item{...}{additional parameters passed to the functions provided in
\code{"implementation"} or \code{"resampling"}.}
}
\value{
A matrix of lambda values with one column and as many rows as
  indicated in \code{Lambda_cardinal}.
}
\description{
Generates a relevant grid of penalty parameter values for penalised
regression.
}
\examples{
# Data simulation
set.seed(1)
simul <- SimulateRegression(n = 100, pk = 50, family = "gaussian") # simulated data

# Lambda grid for linear regression
Lambda <- LambdaGridRegression(
  xdata = simul$X, ydata = simul$Y,
  family = "gaussian", Lambda_cardinal = 20
)

# Grid can be used in VariableSelection()
stab <- VariableSelection(
  xdata = simul$X, ydata = simul$Y,
  family = "gaussian", Lambda = Lambda
)
print(SelectedVariables(stab))

# Example with group-LASSO (gglasso implementation)
if (requireNamespace("gglasso", quietly = TRUE)) {
  ManualGridGroupLasso <- function(x, y, family, ...) {
    if (family == "gaussian") {
      return(gglasso::cv.gglasso(x = x, y = y, pred.loss = "L1", ...))
    }
  }
  Lambda <- LambdaGridRegression(
    xdata = simul$X, ydata = simul$Y,
    family = "gaussian", Lambda_cardinal = 20,
    implementation = "ManualGridGroupLasso",
    group = sort(rep(1:4, length.out = ncol(simul$X)))
  )
  GroupLasso <- function(x, y, lambda, family, ...) {
    # Running the regression
    if (family == "binomial") {
      ytmp <- y
      ytmp[ytmp == min(ytmp)] <- -1
      ytmp[ytmp == max(ytmp)] <- 1
      mymodel <- gglasso::gglasso(x, ytmp, lambda = lambda, loss = "logit", ...)
    }
    if (family == "gaussian") {
      mymodel <- gglasso::gglasso(x, y, lambda = lambda, loss = "ls", ...)
    }
    # Extracting and formatting the beta coefficients
    beta_full <- t(as.matrix(mymodel$beta))
    beta_full <- beta_full[, colnames(x)]

    selected <- ifelse(beta_full != 0, yes = 1, no = 0)

    return(list(selected = selected, beta_full = beta_full))
  }
  stab <- VariableSelection(
    xdata = simul$X, ydata = simul$Y,
    implementation = "GroupLasso", Lambda = Lambda,
    group = sort(rep(1:4, length.out = ncol(simul$X)))
  )
  print(SelectedVariables(stab))
}
}
\seealso{
Other lambda grid functions: 
\code{\link{LambdaGridGraphical}()},
\code{\link{LambdaSequence}()}
}
\concept{lambda grid functions}
