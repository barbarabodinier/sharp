simul <- SimulateRegression(X=X, theta=mytheta, family = "gaussian")
simul
set.seed(1)
simul <- SimulateRegression(n = 200, pk = 100, family = "binomial")
boxplot(simul$logit_proba ~ simul$Y) # true logit probability by simulated binary outcome
simul <- SimulateRegression(X=X, theta=mytheta, family = "binomial")
simul
SimulateRegression(X=X, theta=mytheta, family = "binomial")
SimulateRegression(X=X, theta=mytheta, family = "binomial")
SimulateRegression(X=X, theta=mytheta, family = "binomial")
use_tidy_style()
document()
library(focus)
build_manual(path="../")
?BiSelection
# Data simulation (continuous outcomes)
pk <- 15
set.seed(1)
simul <- SimulateRegression(n = 50, pk = pk, family = "gaussian")
ydata <- cbind(simul$Y, matrix(rnorm(50 * 3), ncol = 3))
colnames(ydata) <- paste0("outcome", 1:4)
x <- simul$X
y <- ydata
dim(x)
dim(y)
stab <- BiSelection(
xdata = x, ydata = y,
family = "gaussian", ncomp = 3,
LambdaX = 1:(ncol(x) - 1),
implementation = SparsePLS
)
CalibrationPlot(stab)
stab$summary_full
stab$methods
build_manual()
stab$methods
stab$methods$type
stab$summary_full
stab$summary_full$comp
stab$selectedX
load_all()
stab <- BiSelection(
xdata = x, ydata = y,
family = "gaussian", ncomp = 3,
LambdaX = 1:(ncol(x) - 1),
implementation = SparsePLS
)
stab$summary$comp
load_all()
stab$summary_full
document()
library(focus)
?VariableSelection
stability=stab
mat=matrix(NA, nrow=length(unique(stability$summary_full[,2])),
ncol=length(unique(stability$summary_full[,3])))
mat
unique(stability$summary_full[,2])
rownames(mat)=sort(unique(stability$summary_full[,2]))
mat
colnames(mat)=sort(unique(stability$summary_full[,3]))
mat
mat[stability$summary_full[,2:3]]
stability$summary_full[,2:3]
mat[as.matrix(stability$summary_full[,2:3])]
as.matrix(stability$summary_full[,2:3])
mat[as.matrix(stability$summary_full[1,2:3,drop=FALSE])]
mat[as.matrix(stability$summary_full[1,2:3,drop=FALSE]),drop=FALSE]
mat[stability$summary_full[i,2], stability$summary_full[i,3]]
i
stability$summary_full[i,2]
stability$summary_full[i,3]
mat[as.character(stability$summary_full[i,2]), as.character(stability$summary_full[i,3])]
for (i in 1:nrow(stability$summary_full)){
mat[as.character(stability$summary_full[i,2]),
as.character(stability$summary_full[i,3])]=as.character(stability$summary_full$S[i])
}
mat
stability$summary_full
plot(stability$summary_full$S)
?BiSelection
stab <- BiSelection(
xdata = x, ydata = y,
family = "gaussian", ncomp = 3,
LambdaX = 1:(ncol(x) - 1),
LambdaY = 1:(ncol(y) - 1),
implementation = SparsePLS
)
stab$summary_full
plot(stab$summary_full$S)
?Clustering
set.seed(1)
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100,
v_within = c(-1, -0.5), continuous = TRUE
)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
stab <- Clustering(xdata = simul$data)
table(simul$theta, Clusters(stab))
CalibrationPlot(stab)
?GraphicalModel
# Single-block stability selection
set.seed(1)
simul <- SimulateGraphical(n = 100, pk = 20, nu = 0.1)
stab <- GraphicalModel(xdata = simul$data)
plot(Graph(stab))
CalibrationPlot(stab)
?Clustering
# Simulation of 15 observations belonging to 3 groups
set.seed(1)
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100,
v_within = c(-1, -0.5), continuous = TRUE
)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
# Stability selection
stab <- Clustering(xdata = simul$data)
CalibrationPlot(stab)
stab$params$pk
stab$params$n
dim(simul$data)
out$params
stab$params
load_all()
# Simulation of 15 observations belonging to 3 groups
set.seed(1)
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100,
v_within = c(-1, -0.5), continuous = TRUE
)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
# Stability selection
stab <- Clustering(xdata = simul$data)
CalibrationPlot(stab)
use_tidy_style()
stab$methods
stab$method
str(stab)
load_all()
stab <- Clustering(xdata = simul$data)
str(stab)
CalibrationPlot(stab)
load_all()
CalibrationPlot(stab)
load_all()
CalibrationPlot(stab)
stab$Lambda
load_all()
CalibrationPlot(stab)
load_all()
CalibrationPlot(stab)
load_all()
CalibrationPlot(stab)
load_all()
CalibrationPlot(stab)
CalibrationPlot(stab, xlab=expression(italic(k)))
?VariableSelection
set.seed(1)
simul <- SimulateRegression(n = 100, pk = 50, family = "gaussian")
stab <- VariableSelection(
xdata = simul$X,
Lambda = 1:(ncol(simul$X) - 1),
implementation = SparsePCA
)
CalibrationPlot(stab, xlab = "")
print(SelectedVariables(stab))
set.seed(1)
simul <- SimulateRegression(n = 200, pk = 20, family = "binomial")
stab <- VariableSelection(
xdata = simul$X, ydata = simul$Y,
Lambda = 1:(ncol(simul$X) - 1),
implementation = SparsePLS,
family = "binomial"
)
CalibrationPlot(stab, xlab = "")
CalibrationPlot(stab)
document()
library(focus)
build_manual()
SimulateClustering(n=c(10,10,10), pk=100)
simul=SimulateClustering(n=c(10,10,10), pk=100)
?Clustering
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
stab=Clustering(xdata=simul$data)
Argmax(stab)
CalibrationPlot(stab, xlab=expression(italic(k)))
Clusters(stab)
table(Clusters(stab), simul$theta)
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1))
set.seed(1)
simul=SimulateClustering(n=c(10,10,10), pk=200)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1))
stab=Clustering(xdata=simul$data)
CalibrationPlot(stab, xlab=expression(italic(k)))
Clusters(stab)
table(Clusters(stab), simul$theta)
# Data simulation
set.seed(1)
simul=SimulateClustering(n=c(10,10,10), pk=100)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1))
# Stability selection
stab=Clustering(xdata=simul$data)
CalibrationPlot(stab, xlab=expression(italic(k)))
Clusters(stab)
stab$selprop
stab$selprop[,,3]
Heatmap(mat=stab$selprop[,,3])
Clusters(stab)
# Data simulation
set.seed(1)
simul=SimulateClustering(n=c(10,10,10), pk=100)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1))
# Stability selection
stab=Clustering(xdata=simul$data)
CalibrationPlot(stab, xlab=expression(italic(k)))
Clusters(stab)
table(simul$theta, Clusters(stab))
use_tidy_style()
document()
library(focus)
document()
library(focus)
Clusters(stab)
CoMembership(Clusters(stab))
set.seed(1)
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100,
v_within = c(-1, -0.5), v_between=c(-0.5,0), continuous = TRUE
)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
load_all()
set.seed(1)
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100,
v_within = c(-1, -0.5), v_between=c(-0.5,0), continuous = TRUE
)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
set.seed(1)
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100,
v_within = c(-1, -0.5), continuous = TRUE
)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
load_all()
set.seed(1)
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100,
v_within = c(-1, -0.5), continuous = TRUE
)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
set.seed(1)
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100,
v_within = c(-1, -0.5), v_between=c(-0.5,0), continuous = TRUE
)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
set.seed(1)
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100,
v_within = c(-1, -0.5), v_between=c(-0.2,0), continuous = TRUE
)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
set.seed(1)
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100,
v_within = c(-1, -0.5), v_between=c(-0.1,0), continuous = TRUE
)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
set.seed(1)
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100,
v_within = c(-1, -0.5), continuous = TRUE
)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
set.seed(1)
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100,
v_within = c(-1, -0.5), v_between=c(-0.1,0), continuous = TRUE
)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
theta=CoMembership(c(rep(1,5),rep(2,5),rep(3,5)))
theta
theta[1,8]
set.seed(1)
theta=CoMembership(c(rep(1,5),rep(2,5),rep(3,5)))
theta[1,8]=theta[8,1]=1
theta
set.seed(1)
theta=CoMembership(c(rep(1,5),rep(2,5),rep(3,5)))
theta[1,8]=theta[8,1]=1
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100, adjacency=theta,
v_within = c(-1, -0.5), v_between=-1, continuous = TRUE
)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
simul
simul$theta
# Simulation of more heterogeneous groups
set.seed(1)
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100,
v_within = c(-1, -0.5), continuous = TRUE
)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
theta=CoMembership(c(rep(1,5),rep(2,5),rep(3,5)))
theta[1,8]=theta[8,1]=1
set.seed(1)
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100, adjacency=theta,
v_within = c(-1, -0.5), v_between=-1, continuous = TRUE
)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
theta=CoMembership(c(rep(1,5),rep(2,5),rep(3,5)))
theta[1,8]=theta[8,1]=1
set.seed(1)
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100, adjacency=theta, output_matrices=TRUE,
v_within = c(-1, -0.5), v_between=-1, continuous = TRUE
)
theta
load_all()
theta=CoMembership(c(rep(1,5),rep(2,5),rep(3,5)))
theta[1,8]=theta[8,1]=1
set.seed(1)
simul <- SimulateClustering(
n = c(5, 5, 5), pk = 100, adjacency=theta, output_matrices=TRUE,
v_within = c(-1, -0.5), v_between=-1, continuous = TRUE
)
simul$omega
simul$phi
document()
use_tidy_style()
document()
library(focus)
simul=SimulateGraphical()
plot(Graph(simul$theta))
simul2=SimulateRegression(X=simul$data)
Heatmap(cor(simul2$X))
Heatmap(cor(simul2$X), legend_range = c(-1,1))
Heatmap(cor(simul$data), legend_range = c(-1,1))
document()
library(focus)
run_examples(run_donttest=TRUE, run_dontrun=TRUE)
warnings()
build_manual()
getwd()
library(focus)
pk=10
BlockMatrix(pk)
BlockMatrix(pk=c(2,3))
# Creating matrix with block indices
bigblocks <- BlockMatrix(pk)
bigblocks_vect <- bigblocks[upper.tri(bigblocks)]
bigblocks_vect
pk=c(2,3)
# Creating matrix with block indices
bigblocks <- BlockMatrix(pk)
bigblocks_vect <- bigblocks[upper.tri(bigblocks)]
bigblocks_vect
use_tidy_style()
library(focus)
use_tidy_style()
# Building v matrix
v <- bigblocks
v
v_vect=v[upper.tri(v)]
v_vect
length(v_vect)
v_vect=runif(length(v))
v_vect
v[upper.tri(v)]
v[upper.tri(v)]=v_vect
v_vect=runif(length(v_vect))
v_vect=v[upper.tri(v)]
v_vect=runif(length(v_vect))
v[upper.tri(v)]=v_vect
v
v[lower.tri(v)]=v_vect
v
use_tidy_style()
load_all()
set.seed(1)
simul=SimulateGraphical(n=1000, pk=5, nu=0.35, output_matrices=TRUE)
simul$omega
load_all()
set.seed(1)
simul=SimulateGraphical(n=1000, pk=5, nu=0.35, output_matrices=TRUE)
simul$omega
load_all()
set.seed(1)
simul=SimulateGraphical(n=1000, pk=5, nu=0.35, output_matrices=TRUE)
use_tidy_style()
library(focus)
load_all()
set.seed(1)
simul <- SimulateClustering(n = c(5, 5, 5), pk = 100)
par(mar = c(5, 5, 5, 5))
Heatmap(
mat = cor(t(simul$data)),
colours = c("navy", "white", "red"),
legend_range = c(-1, 1)
)
simul=SimulateClustering(n=c(10,10,10), pk=100)
document()
library(focus)
document()
library(focus)
library(focus)
?glassoFast::glassoFast
library(focus)
?VariableSelection
set.seed(1)
simul <- SimulateRegression(n = 100, pk = 50, family = "gaussian")
stab <- VariableSelection(xdata = simul$X, ydata = simul$Y, family = "gaussian")
stab$Lambda
library(focus)
build_manual()
